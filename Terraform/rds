provider "aws" {
  region = "us-east-1"
}

data "aws_secretsmanager_secret_version" "db_credentials" {
  secret_id = "aurora-db-credentials"
}

locals {
  db_username = jsondecode(data.aws_secretsmanager_secret_version.db_credentials.secret_string)["username"]
  db_password = jsondecode(data.aws_secretsmanager_secret_version.db_credentials.secret_string)["password"]
}

resource "aws_security_group" "aurora_sg" {
  name        = "aurora-sg"
  description = "Security group for Aurora PostgreSQL"
  vpc_id      = var.vpc_id

  ingress {
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    cidr_blocks = ["10.244.40.0/22"] # Adjust CIDR range as needed
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "aurora-sg"
  }
}

resource "aws_db_subnet_group" "aurora_private" {
  name       = "aurora-private-subnet-group"
  subnet_ids = var.private_subnet_ids

  tags = {
    Name = "aurora-private"
  }
}

resource "aws_rds_cluster" "aurora" {
  cluster_identifier      = "aurora-postgres-cluster"
  engine                  = "aurora-postgresql"
  engine_mode             = "provisioned"
  engine_version          = "16.6"
  database_name           = "cmm-poc-db"
  master_username         = local.db_username
  master_password         = local.db_password
  vpc_security_group_ids  = [aws_security_group.aurora_sg.id]
  iam_database_authentication_enabled = true
  serverlessv2_scaling_configuration {
    min_capacity = 0.5
    max_capacity = 4
  }
  storage_encrypted       = true
  skip_final_snapshot     = true
}

resource "aws_rds_cluster_instance" "aurora_instance" {
  identifier              = "aurora-postgres-instance-1"
  cluster_identifier      = aws_rds_cluster.aurora.id
  instance_class          = "db.serverless"
  engine                  = aws_rds_cluster.aurora.engine
  engine_version          = aws_rds_cluster.aurora.engine_version
  publicly_accessible     = false
}
